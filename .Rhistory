write(toBibtex(citation("dbscan")),
file = "C:\\Users\\gen_adef\\Desktop\\aa\\graphics.bib")
write(toBibtex(citation("dbscan")),
file = "C:\\Users\\gen_adef\\Desktop\\dbscan.bib")
citation("cmeans")
citation("e1071")
devtools::build_vignettes()
devtools::build()
devtools::build()
devtools::check("dPCP_1.0.4.tar.gz")
tools::check_packages_in_dir(reverse = list())
tools::check_packages_in_dir(dir = "U:/R scripts/dPCP_1.0.4.tar.gz",reverse = list())
devtools::check()
devtools::check(run_dont_test = F)
devtools::check(run_dont_test = F)
read.csv(system.file("extdata", "Template_sampleTable.csv", package = "dPCP"),
stringsAsFactors = FALSE, na.strings = c("NA", ""))
sampleTable <- system.file("extdata", "Template_sampleTable.csv",
package = "dPCP")
devtools::install_github("klutometis/roxygen")
devtools::check(run_dont_test = F)
install.packages("dPCP", dependencies=T)
install.packages("dPCP", dependencies = T)
devtools::check(run_dont_test = F)
install.packages("rlang")
install.packages("rlang")
devtools::check(run_dont_test = F)
devtools::check(run_dont_test = F)
devtools::check(run_dont_test = F)
install.packages("foo", dependencies=T)
install.packages("dPCP", dependencies=T)
devtools::check(run_dont_test = F)
install.packages("rlang")
install.packages("rlang")
devtools::check(run_dont_test = F)
update.packages(rlang)
update.packages("rlang")
devtools::check(run_dont_test = F)
install.packages(c("rlang", "rversions"))
devtools::check(run_dont_test = F)
library(rlang)
library(rlang)
package_version(rlang)
package_version("rlang")
library(devtools)
install.packages("rlang")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(devtools)
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
library(devtools)
library(devtools)
library(devtools)
library(devtools)
devtools::check(run_dont_test = F)
devtools::check(run_dont_test = F)
install.packages("devtools")
devtools::build()
install.packages("dPCP")
devtools::build()
install.packages("rmarkdown")
devtools::build()
usethis::use_github()
dPCP <- function(file, system = NULL, file.location = ".",
reference.quality = 0.5, sample.quality = 0.5,
eps = 200, minPts = 50, save.template = FALSE,
rain = TRUE, QC.reference = FALSE) {
if (!is.logical(rain)) stop("rain must be logical")
if (!is.logical(QC.reference)) stop("QC.reference must be logical")
#Read samples table
samTable <- read_sampleTable(file = file, system = system,
file.location = file.location)
#Read reference samples
refSample <- read_reference(sample.table = samTable, system = system,
file.location = file.location,
reference.quality = reference.quality,
eps = eps, minPts = minPts)
#Read samples
samples <- read_sample(sample.table = samTable, system = system,
file.location = file.location,
sample.quality = sample.quality)
#Reference DBSCAN clustering
refSampleDB <- reference_dbscan(reference.subquality = refSample,
sample.table = samTable, eps = eps,
minPts = minPts,
save.template = save.template)
#Predict clusters centers position
centers <- centers_data(sample.subquality = samples, sample.table = samTable,
referenceDB = refSampleDB)
#Fuzzy c-means clustering
cmeansclus <- cmeans_clus(centers.data = centers)
if (isTRUE(rain)) {
clustering <- rain_reclus(cmeans.cluster = cmeansclus)
} else {
clustering <- cmeansclus
}
sil_coef <- lapply(seq_along(samples), function(x) {
coef_all <- silhouette(as.numeric(unclass(clustering[[x]]$data$cluster)),
dist(clustering[[x]]$data[,c(1,2)]))
})
#QC reference
if (isTRUE(QC.reference) & any(!is.na(samTable$Reference))) {
samTable_tab <- do.call(cbind.data.frame, samTable)
samTable_ref <- samTable_tab[match(unique(samTable$Reference),
samTable$Reference),]
class(samTable_ref) <- class(samTable)
refSampleDB_new <- refSampleDB
class(refSampleDB_new) <- class(samples)
centers_new <- centers_data(sample.subquality = refSampleDB_new,
sample.table = samTable_ref,
referenceDB = refSampleDB)
cmeansclus_new <- cmeans_clus(centers.data = centers_new)
rain_ref <- lapply(cmeansclus_new, function(x) {
max.mem <- apply(x$membership, 1, max)
rain <- sum(max.mem < 0.8, na.rm = T) / length(max.mem)
if (rain > 0.01 & rain <= 0.05) {
print(
paste0(
"Between 1% and 5% of data elements in the reference '",
x$reference, "' were classified as rain. ",
"Please check whether the DBSCAN analysis was affected by rain.")
)
} else if (rain > 0.05) {
print(
paste0(
"More than 5% of data elements in the reference '",
x$reference, "' were classified as rain. ",
"The DBSCAN analysis could have been affected by rain. ",
"It may be helpful to use another reference")
)
}
})
}
#Quantification
target.quant <- target_quant(data.cluster = clustering,
sample.table = samTable)
#Replicates pooling
results <- replicates_quant(raw.results = target.quant,
sample.table = samTable)
return.list <- list("referenceDB" = refSampleDB,
"samples" = lapply(seq_along(samples), function(x) {
list(
"quality" = samples[[x]]$quality,
"reference" = samTable$Reference[x],
"centers" = centers[[x]]$centers,
"data" = cbind.data.frame(
samples[[x]]$data,
"cmeans cluster" = cmeansclus[[x]]$data$cluster,
"final cluster" = clustering[[x]]$data$cluster
),
"cmeans membership" = cmeansclus[[x]]$membership,
"raw results" = target.quant[[x]]$`raw results`,
"silhouette coefficient" =
if (any(is.na(sil_coef[[x]]))){
rep("NA", nrow(samples[[x]]$data))
} else {sil_coef[[x]][,3]},
"overall silhouette coefficient" =
if (any(is.na(sil_coef[[x]]))){
"NA"} else {mean(sil_coef[[x]][,3])}
)
}),
"results" = results
)
names(return.list$samples) <- names(samples)
class(return.list) <- "dPCP"
return(return.list)
}
