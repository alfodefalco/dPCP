ClusCount$size[c(5, 9, 10, 11, 13, 14, 15, 16)])
N.pos <- c(famtarget, target3target, target4target, victarget)
target <- ClusCount[2:5, 1]
results <- cbind.data.frame(target, N.pos, totalwells)
}
pos_rate <- results$N.pos / results$totalwells
ci <- lapply(seq(length(pos_rate)), function(x) {
if (results$N.pos[x] == 0) {
pois <- exactci::poisson.exact(
results$N.pos[x], results$totalwells[x],
alternative = "two.sided", tsmethod = "central", midp = TRUE)
c(pois$conf.int[1], pois$conf.int[2])
} else if (results$N.pos[x] < 100) {
pois <- exactci::poisson.exact(
results$N.pos[x], results$totalwells[x],
alternative = "two.sided", tsmethod = "central", midp = FALSE)
c(pois$conf.int[1], pois$conf.int[2])
} else {
c(pos_rate[x] - 1.96 * sqrt(pos_rate[x] * (1 - pos_rate[x])/
results$totalwells[x]),
pos_rate[x] + 1.96 * sqrt(pos_rate[x] * (1 - pos_rate[x])/
results$totalwells[x]))
}
})
ci <- do.call(rbind, ci)
lower_CI_pos_rate <- ci[, 1]
upper_CI_pos_rate <- ci[, 2]
#lower_CI_pos_rate <- pos_rate - 1.96 *
# sqrt(pos_rate * (1 - pos_rate) / results$totalwells)
#upper_CI_pos_rate <- pos_rate + 1.96 *
#sqrt(pos_rate * (1 - pos_rate) / results$totalwells)
lambda <- - log(1 - pos_rate)
lower_CI_lambda <- - log(1 - lower_CI_pos_rate)
upper_CI_lambda <- - log(1 - upper_CI_pos_rate)
concentration <- lambda / partition.volume
lower_CI_concentration <- lower_CI_lambda / partition.volume
upper_CI_concentration <- upper_CI_lambda / partition.volume
conc.dil <- concentration / data$samples[[match(
input$sample, names(data$samples))]]$`raw results`$Dilution[1]
lower_CI_conc.dil <- lower_CI_concentration / data$samples[[match(
input$sample, names(data$samples))]]$`raw results`$Dilution[1]
upper_CI_conc.dil <- upper_CI_concentration / data$samples[[match(
input$sample, names(data$samples))]]$`raw results`$Dilution[1]
spread <- cbind(abs(1 - (lower_CI_lambda)),
abs(1 - (upper_CI_lambda)))
precision <- apply(spread, 1, max) * 100
if (is.null(values$results)) {
values$results <- results()
}
values$results[nrow(values$results) + 1:nrow(results()), ] <-
cbind.data.frame(
results, lambda, lower_CI_lambda, upper_CI_lambda, concentration,
lower_CI_concentration, upper_CI_concentration, conc.dil,
lower_CI_conc.dil, upper_CI_conc.dil, precision,
data$samples[[match(
input$sample, names(data$samples))]]$`raw results`$Dilution)
names(values$results) <- c(
"Target", "Positive reactions", "Total reactions", "lambda",
"Lower CI lambda", "Upper CI lambda", "Copies/ul",
"Lower CI copies/ul", "Upper CI copies/ul",
"Copies/ul at sample dilution",
"Lower CI copies/ul at sample dilution",
"Upper CI copies/ul at sample dilution", "Precision %", "Dilution")
}
})
})
#If clusters have changed activate undo action button
observe({
shinyjs::toggleState("undo", in.clus$count > 0)
})
#Set action for undo action button
observeEvent(input$undo, {
in.clus$count <- in.clus$count - 1
values$new <- dataplot()[, 1:ncol(dataplot()) - 1]
values$results <- values$results[1:(nrow(values$results) -
nrow(results())), ]
})
#Set action for reset action button
observeEvent(input$reset, {
values$new <- NULL
values$results <- NULL
in.clus$count <- 0
manual.mod$clus[[match(input$sample, names(data$samples))]] <-
cluster.data()
manual.mod$res[[match(input$sample, names(data$samples))]] <- results()
})
#Check if manual correction has been done.
#If so show new results, if not show last saved results
output$results <- renderTable({
if (!is.null(values$results)) {
utils::tail(values$results, nrow(results()))
} else {
manual.mod$res[[match(input$sample, names(data$samples))]]
}
}, digits = 3)
observeEvent(input$export, {
withProgress(message = "Exporting data", value = 0, {
incProgress(0.5, detail = "Collecting data")
#If manual correction has been done save the configuration of
#current sample
if (!is.null(values$new)) {
manual.mod$clus[[manual.mod$samples[length(manual.mod$samples)]]] <-
values$new
manual.mod$res[[manual.mod$samples[length(manual.mod$samples)]]] <-
utils::tail(values$results, nrow(results()))
}
c.data <- lapply(seq_along(data$referenceDB), function(x) {
paste(names(
data$referenceDB)[x], data$referenceDB[[x]]$quality,
data$referenceDB[[x]]$dbscan$eps,
data$referenceDB[[x]]$dbscan$minPts, sep = ",")
})
c.name <- paste("Reference", "Quality", "DBSCAN eps",
"DBSCAN minPts", sep = ",")
all.ref <- append(c.name, c.data)
exp.ref <- paste(unlist(all.ref), sep = "\n")
sample.name <- stringr::str_extract(names(data$samples), ".+?(?=_)")
exp.data <- lapply(seq_along(data$samples), function(x) {
repl.index <- which(sample.name[x] == sample.name)
n.repl <- sum(sample.name[x] == sample.name, na.rm = TRUE)
n.target <- nrow(data$samples[[x]]$`raw results`)
tot.rows <- n.repl * n.target
all.col <- cbind.data.frame(
rep(names(data$samples)[x], n.target),
manual.mod$res[[x]],
"Quality" = rep(data$samples[[x]]$quality, n.target),
"Reference" = rep(data$samples[[x]]$reference, n.target)
)
raw.data <- do.call(paste, c(lapply(all.col, "["), sep = ","))
tb1 <- ggpubr::ggtexttable(
cbind(all.col[, 2:4],
round(all.col[, c(5:7)], 5),
round(all.col[, c(8:10)], 3)),
rows = NULL,
cols = c("Target", "Positive \nreactions", "Total \nreactions",
"lambda", "Lower CI \nlambda", "Upper CI \nlambda",
"Copies/ul", "Lower CI \ncopies/ul",
"Upper CI \ncopies/ul"),
theme = ggpubr::ttheme(base_size = 10))
tb1 <- ggpubr::ggtexttable(
cbind(all.col[, 2:4],
round(all.col[, 5], 5),
paste0(round(all.col[, 8], 2),
" (", round(all.col[, 9], 2), " - ",
round(all.col[, 10], 2), ")"
),
paste0(round(all.col[, 11], 2),
" (", round(all.col[, 12], 2), " - ",
round(all.col[, 13], 2), ")"
),
round(all.col[, 14], 2)),
rows = NULL,
cols = c("Target", "Positive\nreactions", "Total\nreactions",
"lambda", "Copies/ul\n(95% CI)",
"Copies/ul at sample\ndilution (95% CI)", "Precision\n%"),
theme = ggpubr::ttheme(base_size = 10))
tx <- paste(
"Quality threshold:", all.col$Quality,
"\nDilution:", all.col$Dilution,
"\nReference:",
paste0(
data$samples[[x]]$reference, " (quality: ",
data$referenceDB[[match(data$samples[[x]]$reference,
names(data$referenceDB))]]$quality,
", ", "eps: ",
data$referenceDB[[match(
data$samples[[x]]$reference,
names(data$referenceDB))]]$dbscan$eps,
", ", "minPts: ",
data$referenceDB[[match(
data$samples[[x]]$reference,
names(data$referenceDB))]]$dbscan$minPts, ")"
)
)
text.p <- ggpubr::ggparagraph(text = tx, color = "black", size = 12)
cluscolors <- c(
"gray70", "#004949", "#ff6db6", "#009292", "#ffb6db", "#490092",
"#006ddb", "#b66dff", "#6db6ff", "#b6dbff", "#920000", "#924900",
"#db6d00", "#24ff24", "#ffff6d",
"#000000")[1:nrow(data$samples[[x]]$centers)]
names(cluscolors) <- rownames(data$samples[[x]]$centers)
graph.p <- ggplot(manual.mod$clus[[x]], aes_string(x = "Vic",
y = "Fam")) +
geom_point(
size = 0.5,
aes(color = as.factor(
manual.mod$clus[[x]][,ncol(manual.mod$clus[[x]])]))) +
labs(color = "Clusters", title = names(data$samples)[x]) +
scale_colour_manual(values = cluscolors, drop = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = NA, color = "black"),
plot.title = element_text(size = 16),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text = element_text(size = 10),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 10),
legend.title = element_text(face = "bold", size = 12)
) +
guides(colour = guide_legend(override.aes = list(size = 2)))
if (isTRUE(save.plot)) {
ggsave(paste0(names(data$samples)[x], "_manual.", format), graph.p,
dpi = dpi, width = 9, height = 9)
}
tot <- ggpubr::ggarrange(graph.p, text.p, tb1, ncol = 1,
nrow = 3, heights = c(7, 2, 4))
if (n.repl == 1) {
exp.repl <- cbind.data.frame(
rep(names(data$samples)[x], tot.rows),
manual.mod$res[[x]][, c(1, 10:13)],
"No of replicates" = rep(n.repl, n.target)
)
} else {
exp.repl <- lapply(seq(n.target), function(y) {
sing.target <- lapply(repl.index, function(z) {
if (any(is.na(manual.mod$res[[z]][y, c(4:6, 14)]))) {
NULL
} else {
manual.mod$res[[z]][y, c(2, 3)]
}
})
sing.target <- do.call(rbind.data.frame, sing.target)
pos_tot <- sum(sing.target[, 1])
total_tot <- sum(sing.target[, 2])
pos_rate <- pos_tot / total_tot
if (pos_tot == 0) {
pois <- exactci::poisson.exact(pos_tot, total_tot,
alternative = "two.sided",
tsmethod = "central", midp = TRUE)
lower_CI_pos_rate <- pois$conf.int[1]
upper_CI_pos_rate <- pois$conf.int[2]
} else if (pos_tot < 100) {
pois <- exactci::poisson.exact(pos_tot, total_tot,
alternative = "two.sided",
tsmethod = "central", midp = FALSE)
lower_CI_pos_rate <- pois$conf.int[1]
upper_CI_pos_rate <- pois$conf.int[2]
} else {
lower_CI_pos_rate <- pos_rate -
1.96 * sqrt(pos_rate * (1 - pos_rate) / total_tot)
upper_CI_pos_rate <- pos_rate +
1.96 * sqrt(pos_rate * (1 - pos_rate) / total_tot)
}
lambda <- - log(1 - pos_rate)
lower_CI_lambda <- - log(1 - lower_CI_pos_rate)
upper_CI_lambda <- - log(1 - upper_CI_pos_rate)
concentration <- lambda / partition.volume
lower_CI_concentration <- lower_CI_lambda / partition.volume
upper_CI_concentration <- upper_CI_lambda / partition.volume
spread <- cbind(abs(1 - (lower_CI_lambda)),
abs(1 - (upper_CI_lambda)))
precision <- apply(spread, 1, max) * 100
cbind.data.frame(
"Sample" = sample.name[x],
"Target" = data$samples[[x]]$`raw results`[y, 2],
"Copies/ul" = concentration,
"Lower CI copies/ul" = lower_CI_concentration,
"Upper CI copies/ul" = upper_CI_concentration,
"Precision %" = precision,
"No of replicates" = n.repl)
})
exp.repl <- do.call(rbind.data.frame, exp.repl)
}
exp.repl <- do.call(paste, c(lapply(exp.repl, "["), sep = ","))
list("data_results" = raw.data, "results" = exp.repl, "report" = tot)
})
names(exp.data) <- sample.name
raw.name <- paste(
"Sample", "Target", "Positive reactions", "Total reactions",
"lambda", "Lower CI lambda", "Upper CI lambda", "Copies/ul",
"Lower CI copies/ul", "Upper CI copies/ul",
"Copies/ul at sample dilution",
"Lower CI copies/ul at sample dilution",
"Upper CI copies/ul at sample dilution",
"Precision %", "Dilution", "Quality", "Reference", sep = ",")
all.raw <- append(
raw.name,
lapply(exp.data, function(x) {
x$data_results
})
)
exp.raw <- paste(unlist(all.raw), sep = "\n")
repl.name <- paste(
"Sample", "Target", "Copies/ul", "Lower CI copies/ul",
"Upper CI copies/ul", "Precision %", "No of replicates", sep = ",")
all.repl <- append(
repl.name,
lapply(match(unique(names(exp.data)), names(exp.data)), function(x) {
exp.data[[x]]$results
})
)
exp.repl <- paste(unlist(all.repl), sep = "\n")
all.exp <- rlist::list.append("Reference samples", exp.ref, "",
"Results", exp.raw, "",
"Replicates results", exp.repl)
all.exp <- strsplit(all.exp, ",")
all.exp <- sapply(all.exp, function(x) {
if (length(x) > 10) {
x[5:16] <- gsub("\\.", ",", x[5:16])
} else if (length(x) > 6) {
x[3:6] <- gsub("\\.", ",", x[3:6])
}
paste(x, collapse = "\t")
})
incProgress(1, detail = "Writing files")
utils::write.table(all.exp, paste0(filename, ".csv"),
row.names = FALSE, col.names = FALSE, sep = "\t",
na = "", quote = TRUE)
report <- lapply(exp.data, function(x) {
x$report
})
ggpubr::ggexport(plotlist = report,
filename = paste0(filename, ".pdf"), width = 8,
height = 11, res = 300)
})
})
}
shinyApp(ui = ui, server = server)
}
manual_correction(alldPCP2,"aaa")
manual_correction(alldPCP2,"aaa")
manual_correction(alldPCP,"aaa")
setwd("~/Documents/R/Projects/dPCP")
devtools::test()
install.packages("devtools")
devtools::test()
devtools::test_coverage()
devtools::run_examples()
devtools::run_examples()
devtools::check()
devtools::run_examples()
devtools::check()
devtools::check()
devtools::check()
install.packages("cluster")
install.packages("cluster")
install.packages("cluster")
devtools::check()
check(...., args = "--no-examples")
devtools::check(...., args = "--no-examples")
devtools::check(args = "--no-examples")
devtools::check(args = "--no-examples")
devtools::document()
devtools::check(args = "--no-examples")
devtools::document()
devtools::document()
devtools::check(args = "--no-examples")
devtools::document()
devtools::document()
devtools::check(args = "--no-examples")
devtools::document()
devtools::check(args = "--no-examples")
devtools::document()
devtools::check(args = "--no-examples")
setwd("~/Documents/R/Projects/dPCP")
alldPCP <- dPCP("Template dPCRb.csv", system = "b", rain = T)
setwd("~/Desktop/Table3_Figure4-Multicomparison")
alldPCP <- dPCP("Template dPCRb.csv", system = "b", rain = T)
inherits(alldPCP, "dPCP")
setwd("~/Documents/R/Projects/dPCP")
devtools::check(args = "--no-examples")
devtools::check(args = "--as-cran")
sampleTable <- system.file("extdata", "Template_sampleTable.csv",
#'                      package = "dPCP")
sampleTable <- system.file("extdata", "Template_sampleTable.csv",
package = "dPCP")
fileLoc <- system.file("extdata",package = "dPCP")
results <- dPCP(sampleTable, system = "bio-rad", file.location = fileLoc,
eps = 200, minPts = 50, save.template = FALSE,
rain = TRUE)
class(sampleTable)
sampleTable <- system.file("extdata", "Template_sampleTable.csv",
package = "dPCP")
fileLoc <- system.file("extdata", package = "dPCP")
sample.table <- read_sampleTable(sampleTable, system = "bio-rad",
file.location = fileLoc)
class(sample.table)
devtools::check(args = "--as-cran")
sampleTable <- system.file("extdata", "Template_sampleTable.csv",
package = "dPCP")
fileLoc <- system.file("extdata",package = "dPCP")
sample.table <- read_sampleTable(sampleTable, system = "bio-rad",
file.location = fileLoc)
results <- dPCP(sample.table, system = "bio-rad", file.location = fileLoc,
eps = 200, minPts = 50, save.template = FALSE,
rain = TRUE)
sampleTable <- system.file("extdata", "Template_sampleTable.csv",
package = "dPCP")
results <- dPCP(sample.table, system = "bio-rad", file.location = fileLoc,
eps = 200, minPts = 50, save.template = FALSE,
rain = TRUE)
results <- dPCP(sampleTable, system = "bio-rad", file.location = fileLoc,
eps = 200, minPts = 50, save.template = FALSE,
rain = TRUE)
devtools::check(args = "--as-cran")
sampleTable <- system.file("extdata", "Template_sampleTable.csv",
package = "dPCP")
> fileLoc <- system.file("extdata",package = "dPCP")
sampleTable <- system.file("extdata", "Template_sampleTable.csv",
package = "dPCP")
fileLoc <- system.file("extdata",package = "dPCP")
results <- dPCP(sampleTable, system = "bio-rad", file.location = fileLoc,
eps = 200, minPts = 50, save.template = FALSE,
rain = TRUE)
sampleTable <- system.file("extdata", "Template_sampleTable.csv",
package = "dPCP")
fileLoc <- system.file("extdata", package = "dPCP")
#dPCP analysis
results <- dPCP(sampleTable, system = "bio-rad", file.location = fileLoc,
eps = 200, minPts = 50, save.template = FALSE, rain = TRUE,
QC.reference = FALSE)
sampleTable <- system.file("extdata", "Template_sampleTable.csv",
package = "dPCP")
fileLoc <- system.file("extdata", package = "dPCP")
#Read sample table file
sample.table <- read_sampleTable(sampleTable, system = "bio-rad",
file.location = fileLoc)
#Read reference files
ref <- read_reference(sample.table, system = "bio-rad",
file.location = fileLoc)
View(sample.table)
class(sample.table)
inherits(sample.table, "sample_table")
!inherits(sample.table, "sample_table")
if (inherits(sample.table, "sample_table"))
stop("'sample.table' must be an object of class sample_table")
if (!inherits(sample.table, "sample_table"))
stop("'sample.table' must be an object of class sample_table")
devtools::check(args = "--as-cran")
devtools::check(args = c("--no-examples", "--as-cran"))
library(dPCP)
library(ggplot2)
library(cluster)
length(2)==1
source("~/Documents/R/Projects/dPCP/R/1.input_data.R")
source("~/Documents/R/Projects/dPCP/R/2.clustering_part1.R")
source("~/Documents/R/Projects/dPCP/R/3.clustering_part2.R")
source("~/Documents/R/Projects/dPCP/R/4.quantification_and_export.R")
source("~/Documents/R/Projects/dPCP/R/dPCPclustering.R")
library(ggplot2)
library(cluster)
alldPCP <- dPCP("Template dPCR.csv", system = "b", rain = T)
setwd("~/Documents/dPCP/Figure5 and 6-ddPCRclust comparison 1")
alldPCP <- dPCP("Template dPCR.csv", system = "b", rain = T)
View(alldPCP)
manual_correction(alldPCP)
manual_correction(alldPCP, "aaa")
library(shiny)
manual_correction(alldPCP,"aaa")
setwd("~/Documents/R/Projects/dPCP")
setwd("~/Documents/dPCP/Figure5 and 6-ddPCRclust comparison 1")
alldPCP <- dPCP("Template dPCR.csv", system = "o", rain = T)
setwd("~/Documents/R/Projects/dPCP")
source("~/Documents/R/Projects/dPCP/R/dPCPclustering.R")
source("~/Documents/R/Projects/dPCP/R/4.quantification_and_export.R")
source("~/Documents/R/Projects/dPCP/R/3.clustering_part2.R")
source("~/Documents/R/Projects/dPCP/R/2.clustering_part1.R")
source("~/Documents/R/Projects/dPCP/R/1.input_data.R")
setwd("~/Documents/dPCP/Figure5 and 6-ddPCRclust comparison 1")
alldPCP <- dPCP("Template dPCR.csv", system = "o", rain = T)
alldPCP <- dPCP("Template dPCR.csv", system = "o", rain = T, partition.volume = 1)
View(alldPCP)
alldPCP[["samples"]][["Sample1_G08"]][["quality"]]
manual_correction(alldPCP,"aaa")
alldPCPt <- dPCP("Template dPCRt.csv", system = "t", rain = T)
setwd("~/Documents/dPCP/Table3_Figure4-Multicomparison")
alldPCPt <- dPCP("Template dPCRt.csv", system = "t", rain = T)
manual_correction(alldPCPt, "aaa")
View(alldPCPt)
manual_correction(alldPCPt, "aaa")
setwd("~/Documents/R/Projects/dPCP")
source("~/Documents/R/Projects/dPCP/R/1.input_data.R")
source("~/Documents/R/Projects/dPCP/R/2.clustering_part1.R")
source("~/Documents/R/Projects/dPCP/R/3.clustering_part2.R")
source("~/Documents/R/Projects/dPCP/R/4.quantification_and_export.R")
source("~/Documents/R/Projects/dPCP/R/dPCPclustering.R")
setwd("~/Documents/dPCP/Figure5 and 6-ddPCRclust comparison 1")
alldPCP <- dPCP("Template dPCR.csv", system = "b", rain = T, color.blind = T)
plot(alldPCP, reference = 1, type = "reference dbscan",color.blind = T)
plot(alldPCP, type = "reference dbscan",color.blind = T)
plot(alldPCP, type = "centers",color.blind = T, sample = 1)
plot(alldPCP, type = "cmeans",color.blind = T, sample = 1)
plot(alldPCP, type = "rain",color.blind = T, sample = 1)
plot(alldPCP, type = "dPCP",color.blind = T, sample = 1)
plot(alldPCP, type = "silhouette",color.blind = T, sample = 1)
source("~/Documents/R/Projects/dPCP/R/dPCPclustering.R")
alldPCP <- dPCP("Template dPCR.csv", system = "b", rain = T, color.blind = T)
alldPCP <- dPCP("Template dPCR.csv", system = "b", rain = T)
plot(alldPCP, type = "cmeans",color.blind = T, sample = 1)
plot(alldPCP, type = "cmeans",color.blind = F, sample = 1)
plot(alldPCP, type = "rain",color.blind = F, sample = 1)
plot(alldPCP, type = "dPCP",color.blind = F, sample = 1)
plot(alldPCP, type = "silhouette",color.blind = F, sample = 1)
manual_correction(alldPCP, filename = "aaa", color.blind = F)
source("~/Documents/R/Projects/dPCP/R/3.clustering_part2.R")
manual_correction(alldPCP, filename = "aaa", color.blind = F)
plot(alldPCP, type = "cmeans",color.blind = F, sample = 1)
plot(alldPCP, type = "cmeans",color.blind = T, sample = 1)
plot(alldPCP, type = "rain",color.blind = T, sample = 1)
plot(alldPCP, type = "dPCP",color.blind = T, sample = 1)
report_dPCP(alldPCP, "aaa", color.blind = F)
report_dPCP(alldPCP, "aaa", color.blind = T)
source("~/Documents/R/Projects/dPCP/R/dPCPclustering.R")
source("~/Documents/R/Projects/dPCP/R/dPCPclustering.R")
setwd("~/Documents/R/Projects/dPCP")
setwd("~/Documents/R/Projects/dPCP")
setwd("~/Documents/R/Projects/dPCP")
setwd("~/Documents/R/Projects")
Sys.setLanguage("EN")
Sys.setLanguage()
Sys.setLanguage(lang = "en")
